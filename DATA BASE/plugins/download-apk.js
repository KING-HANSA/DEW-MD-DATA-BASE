const {readEnv} = require('../lib/database')
const { cmd } = require('../command');
const { fetchJson } = require('../lib/functions');

cmd({
    pattern: "apk",
    alias: ["app"],
    react: "üì≤",
    desc: "Download Apk",
    category: "download",
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        const config = await readEnv();
        if (!q) return reply("Please Provide A Name To Apk");

        const res = await fetch(`https://apis.davidcyriltech.my.id/download/apk?text=${encodeURIComponent(q)}`);
        const data = await res.json();
        
        if (!data.success) return reply("Faild To Download Apk");

        let desc = `„Äå ùóîùó£ùóû ùóóùó¢ùó™ùó°ùóüùó¢ùóîùóóùóòùó• „Äç
‚ï≠‚îÄ‚îÄüì¶ APK Details üì¶‚îÄ‚îÄ‚ó¶‚Ä¢‚ó¶‚ù•‚Ä¢
‚ïé
‚ïé üè∑ N·¥Ä·¥ç·¥á : ${data.apk_name}
‚ïé
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ó¶‚Ä¢‚ó¶‚ù•‚Ä¢
‚¶Å‚¶Ç‚¶Å‚îÅ‚îâ‚îÅ‚îâ‚îÅ‚îâ‚îÅ‚îâ‚îÅ‚îâ‚îÅ‚îâ‚îÅ‚îâ‚îÅ‚¶Å‚¶Ç‚¶Å

üî¢ Reply below number

*[1] Download File* üì•
   1.1 ‚îÇ‚ùØ‚ùØ‚ó¶ Apk File üìÇ
   1.2 ‚îÇ‚ùØ‚ùØ‚ó¶ XApk File üìÇ

*${config.COPYRIGHT}*`;

const vv = await conn.sendMessage(from, { image: { url: data.thumbnail }, caption: desc }, { quoted: mek });  

conn.ev.on('messages.upsert', async (msgUpdate) => {
    const msg = msgUpdate.messages[0];
    if (!msg.message || !msg.message.extendedTextMessage) return;

    const selectedOption = msg.message.extendedTextMessage.text.trim();

    if (msg.message.extendedTextMessage.contextInfo && msg.message.extendedTextMessage.contextInfo.stanzaId === vv.key.id) {
        switch (selectedOption) {
            case '1.1':;
            const config1 = await readEnv();
                await conn.sendMessage(from, { document: { url: data.download_link }, mimetype: "application/vnd.android.package-archive", fileName: `„Äé ${data.apk_name} „Äè.apk`, caption: `*${config1.COPYRIGHT}*` }, { quoted: mek });
                break;
            case '1.2':;
            const config2 = await readEnv();
                await conn.sendMessage(from, { document: { url: data.download_link }, mimetype: "application/vnd.android.package-archive", fileName: `„Äé ${data.apk_name} „Äè.apk`, caption: `*${config2.COPYRIGHT}*` }, { quoted: mek });
                break;
            default:
                reply("Invalid option. Please select a valid optionüî¥");
        }

    }
});

} catch (e) {
console.error(e);
await conn.sendMessage(from, { react: { text: '‚ùå', key: mek.key } })
reply('An error occurred while processing your request.');
}
});
